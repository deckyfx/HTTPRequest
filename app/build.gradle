apply plugin: 'com.android.library'

apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.deckyfx'
version = versionName

def groupName = group
def artifactName = 'httprequest'

android {
    compileSdkVersion 24
    buildToolsVersion '25.0.0'
    enforceUniquePackageName = false
    android.packageBuildConfig = false

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
}

// Automatic versioning
//ext.INCREASE_VERSION_NAME_WHEN_RUN_TASK = ""
//ext.INCREASE_VERSION_CODE_WHEN_RUN_TASK = ""
//apply from: 'https://raw.githubusercontent.com/deckyfx/AndroidTemplate/master/automatic-versioning.gradle'

// Automatic sqlite management - Using old version from bintray
// apply from: 'https://raw.githubusercontent.com/deckyfx/gdgen/master/gdgen.gradle'
// Automatic sqlite management - Using new version from jitpack
apply from: 'https://raw.githubusercontent.com/deckyfx/gdgen/master/gdgen-new.gradle'

configurations {
    doc {
        transitive false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compileOnly 'com.github.franmontiel:PersistentCookieJar:v1.0.0'
    compileOnly 'com.squareup.okhttp3:okhttp:3.2.0'
    compileOnly 'com.github.deckyfx:dbhelper:-SNAPSHOT'
    compileOnly 'com.squareup.okhttp3:logging-interceptor:3.2.0'

    testCompile 'junit:junit:4.12'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}