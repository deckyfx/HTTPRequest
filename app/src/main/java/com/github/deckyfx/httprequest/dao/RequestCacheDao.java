package com.github.deckyfx.httprequest.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.github.deckyfx.greendao.AbstractDao;
import com.github.deckyfx.greendao.Property;
import com.github.deckyfx.greendao.internal.DaoConfig;
import com.github.deckyfx.greendao.database.Database;
import com.github.deckyfx.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REQUEST_CACHE".
*/
public class RequestCacheDao extends AbstractDao<RequestCache, Long> {

    public static final String TABLENAME = "REQUEST_CACHE";

    /**
     * Properties of entity RequestCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Method = new Property(2, String.class, "method", false, "METHOD");
        public final static Property Param = new Property(3, String.class, "param", false, "PARAM");
        public final static Property Header = new Property(4, String.class, "header", false, "HEADER");
        public final static Property Response = new Property(5, String.class, "response", false, "RESPONSE");
        public final static Property CreatedAt = new Property(6, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(7, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    }

    private DaoSession daoSession;


    public RequestCacheDao(DaoConfig config) {
        super(config);
    }
    
    public RequestCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REQUEST_CACHE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"METHOD\" TEXT," + // 2: method
                "\"PARAM\" TEXT," + // 3: param
                "\"HEADER\" TEXT," + // 4: header
                "\"RESPONSE\" TEXT," + // 5: response
                "\"CREATED_AT\" INTEGER," + // 6: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 7: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REQUEST_CACHE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RequestCache entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
 
        String param = entity.getParam();
        if (param != null) {
            stmt.bindString(4, param);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(5, header);
        }
 
        String response = entity.getResponse();
        if (response != null) {
            stmt.bindString(6, response);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(7, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(8, updatedAt.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RequestCache entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
 
        String param = entity.getParam();
        if (param != null) {
            stmt.bindString(4, param);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(5, header);
        }
 
        String response = entity.getResponse();
        if (response != null) {
            stmt.bindString(6, response);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(7, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(8, updatedAt.getTime());
        }
    }

    @Override
    protected final void attachEntity(RequestCache entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RequestCache readEntity(Cursor cursor, int offset) {
        RequestCache entity = new RequestCache( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // method
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // param
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // header
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // response
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createdAt
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // updatedAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RequestCache entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMethod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParam(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeader(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResponse(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatedAt(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdatedAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RequestCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RequestCache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RequestCache entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
